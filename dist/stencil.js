!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react"),require("prop-types"),require("assign-deep")):"function"==typeof define&&define.amd?define(["react","prop-types","assign-deep"],t):"object"==typeof exports?exports.stencil=t(require("react"),require("prop-types"),require("assign-deep")):e.stencil=t(e.react,e["prop-types"],e["assign-deep"])}(this,function(e,t,n){return function(e){function t(r){if(n[r])return n[r].exports;var u=n[r]={i:r,l:!1,exports:{}};return e[r].call(u.exports,u,u.exports,t),u.l=!0,u.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=16)}([function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return"string"!=typeof e?null:"stncl"+e};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){return"func"===t?"":"number"===t?Number(e):"bool"===t?JSON.parse(e||!1):e};t.default=r},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),a=r(u),l=n(1),o=r(l),s=n(9),c=r(s),i=n(6),f=r(i),d=n(13),p=r(d),m=n(10),b=r(m),y=n(7),_=r(y),h=n(12),v=r(h),E=n(2),O=r(E),g=function(e){var t=e.name,n=e.description,r=e.status,u=e.notes,l=e.props,o=e.examples,s=e.setExample,i=e.setProp,d=e.componentProps,m=e.swatches,y=e.children;return a.default.createElement("section",{className:(0,O.default)("__layout")},a.default.createElement("h1",{className:(0,O.default)("__title")},t),a.default.createElement(p.default,{status:r}),a.default.createElement(f.default,null,n),a.default.createElement("section",{className:(0,O.default)("__body")},a.default.createElement(b.default,{swatches:m},y),a.default.createElement(_.default,{setExample:s,examples:o}),a.default.createElement(v.default,{state:d,props:l,setProp:i}),a.default.createElement(c.default,{notes:u})))};g.propTypes={children:o.default.element.isRequired,setExample:o.default.func.isRequired,setProp:o.default.func.isRequired,componentProps:o.default.object.isRequired,props:o.default.object,swatches:o.default.arrayOf(o.default.string),name:o.default.string,description:o.default.node,notes:o.default.object,examples:o.default.object,status:o.default.oneOf(["DANGEROUS","WIP","READY"])},t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(17),u=function(e){return e&&e.__esModule?e:{default:e}}(r),a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.props,n=e.swatches,r=arguments[1];return(0,u.default)({},{props:t,swatches:n},r)};t.default=a},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),a=r(u),l=n(1),o=r(l),s=n(2),c=r(s),i=function(e){var t=e.children;return!!t&&a.default.createElement("section",{className:(0,c.default)("__description")},t)||null};i.propTypes={children:o.default.node},t.default=i},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(0),c=r(s),i=n(1),f=r(i),d=n(2),p=r(d),m=function(e){function t(e){u(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={current:"default"},n.onChange=n.onChange.bind(n),n}return l(t,e),o(t,[{key:"onChange",value:function(e){var t=e.target.value;this.props.setExample(t),this.setState({current:t})}},{key:"render",value:function(){var e=this.props.examples;return!!e&&c.default.createElement("section",null,c.default.createElement("h2",{className:(0,p.default)("__title")},"Examples"),c.default.createElement("div",{className:(0,p.default)("__dropdown")},c.default.createElement("select",{className:(0,p.default)("__dropdown__select"),onChange:this.onChange,value:this.state.current},Object.keys(e).map(function(e){return c.default.createElement("option",{key:e},e)})),c.default.createElement("div",{className:(0,p.default)("__dropdown__arrow")})))||null}}]),t}(s.Component);m.propTypes={setExample:f.default.func.isRequired,examples:f.default.object},t.default=m},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.handleInputOnChange=void 0;var u=n(0),a=r(u),l=n(1),o=r(l),s=n(2),c=r(s),i=n(3),f=r(i),d=function(e,t,n){return function(r){var u=r.target;return e(t,(0,f.default)("bool"===n?u.checked:u.value),n)}},p=function(e){var t=e.name,n=e.type,r=e.onChange,u=e.value,l=d(r,t,n),o=void 0;return"string"===n&&(o=a.default.createElement("input",{type:"text",value:u,className:(0,c.default)("__input"),onChange:l})),"number"===n&&(o=a.default.createElement("input",{type:"number",value:u,className:(0,c.default)("__input"),onChange:l})),"bool"===n&&(o=a.default.createElement("input",{type:"checkbox",checked:u,className:(0,c.default)("__checkbox"),onChange:l})),o||null};p.propTypes={name:o.default.string.isRequired,type:o.default.oneOf(["string","number","bool"]).isRequired,onChange:o.default.func.isRequired,value:o.default.oneOfType([o.default.string,o.default.number,o.default.bool])},t.handleInputOnChange=d,t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),a=r(u),l=n(1),o=r(l),s=function(e){var t=e.notes;return!!t&&a.default.createElement("section",null,a.default.createElement("h2",null,"Notes"),Object.keys(t).map(function(e){return a.default.createElement("div",{key:e},a.default.createElement("h3",null,e),t[e])}))||null};s.propTypes={notes:o.default.object},t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(0),c=r(s),i=n(1),f=r(i),d=n(2),p=r(d),m=n(14),b=r(m),y=function(e){function t(e){u(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={current:null},n.setSwatch=n.setSwatch.bind(n),n}return l(t,e),o(t,[{key:"setSwatch",value:function(e){this.setState({current:e})}},{key:"render",value:function(){var e=this,t=this.state.current,n=this.props,r=n.swatches,u=n.children,a=void 0;return r&&r.length>0&&(a=c.default.createElement("div",null,c.default.createElement(b.default,{swatch:null,onClick:this.setSwatch}),r.map(function(t){return c.default.createElement(b.default,{key:t,swatch:t,onClick:e.setSwatch})}))),c.default.createElement("div",null,a,c.default.createElement("div",{style:{background:t},className:(0,p.default)("__preview")},u))}}]),t}(s.Component);t.default=y,y.propTypes={children:f.default.element.isRequired,swatches:f.default.arrayOf(f.default.string)}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function u(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l=n(0),o=r(l),s=n(1),c=r(s),i=n(8),f=r(i),d=function(e){var t=e.name,n=e.defs,r=void 0===n?{}:n,l=u(e,["name","defs"]),s=r.type,c=r.required,i=r.description,d=void 0;i&&(d=o.default.createElement("div",null,i));var p=void 0;return"string"!==s&&"number"!==s&&"bool"!==s||(p=o.default.createElement(f.default,a({type:s,name:t},l))),o.default.createElement("li",null,o.default.createElement("div",null,t),o.default.createElement("div",null,o.default.createElement("b",null,s),c?o.default.createElement("i",null," - is required"):null),d,p)};d.propTypes={name:c.default.string.isRequired,defs:c.default.shape({type:c.default.string.isRequired,required:c.default.bool,defaultValue:c.default.node,description:c.default.string}).isRequired,restProps:c.default.object},t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),a=r(u),l=n(1),o=r(l),s=n(11),c=r(s),i=n(3),f=r(i),d=function(e){var t=e.state,n=e.setProp,r=e.props;return!!r&!!t&&a.default.createElement("section",null,a.default.createElement("h2",null,"Props"),a.default.createElement("ul",null,Object.keys(r).map(function(e){return a.default.createElement(c.default,{key:e,name:e,defs:r[e],value:(0,f.default)(t[e],r[e].type),onChange:n})})))||null};d.propTypes={setProp:o.default.func.isRequired,state:o.default.object,props:o.default.object},t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),a=r(u),l=n(1),o=r(l),s=n(2),c=r(s),i=n(15),f=r(i),d=function(e){var t=e.status;return!!t&&a.default.createElement("span",{className:(0,c.default)("__status")+" "+(0,c.default)("__status--"+f.default[t].className)},f.default[t].text)||null};d.propTypes={status:o.default.oneOf(["DANGEROUS","WIP","READY"])},t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),a=r(u),l=n(1),o=r(l),s=n(2),c=r(s),i=function(e){var t=e.swatch,n=e.onClick,r=function(){return n(t)};return a.default.createElement("button",{className:(0,c.default)("__swatch-button"),style:{background:t},onClick:r})};i.propTypes={onClick:o.default.func.isRequired,swatch:o.default.string},t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={DANGEROUS:{text:"Dangerous",className:"dangerous"},WIP:{text:"Work in progress",className:"wip"},READY:{text:"Ready",className:"ready"}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(5);Object.defineProperty(t,"merge",{enumerable:!0,get:function(){return r(i).default}});var f=n(0),d=r(f),p=n(4),m=r(p),b=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(t){return function(n){function r(t){a(this,r);var n=l(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,t));return n.state={},n.extendedExamples=Object.assign(e.examples||{},{default:s({},n.props)}),n.setExample=n.setExample.bind(n),n.setProp=n.setProp.bind(n),n}return o(r,n),c(r,[{key:"setExample",value:function(e){this.setState(s({},this.extendedExamples[e]))}},{key:"setProp",value:function(e,t){this.setState(u({},e,t))}},{key:"render",value:function(){var n=Object.assign({},this.props,this.state);return d.default.createElement(m.default,s({setExample:this.setExample,setProp:this.setProp,componentProps:n},e),d.default.createElement(t,n))}}]),r}(f.Component)}};t.default=b},function(e,t){e.exports=n}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,