!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react"),require("prop-types"),require("assign-deep")):"function"==typeof define&&define.amd?define(["react","prop-types","assign-deep"],t):"object"==typeof exports?exports.stencil=t(require("react"),require("prop-types"),require("assign-deep")):e.stencil=t(e.react,e["prop-types"],e["assign-deep"])}(this,function(e,t,n){return function(e){function t(r){if(n[r])return n[r].exports;var u=n[r]={i:r,l:!1,exports:{}};return e[r].call(u.exports,u,u.exports,t),u.l=!0,u.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=13)}([function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){return"stncl"+(e?"__"+e:"")+(t?"--"+t:"")};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){return"func"===t?"":"number"===t?Number(e):"bool"===t?JSON.parse(e||!1):e};t.default=r},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),a=r(u),o=n(1),l=r(o),i=n(8),s=r(i),c=n(9),f=r(c),d=n(6),p=r(d),m=n(11),y=r(m),b=n(2),h=r(b),v=function(e){var t=e.name,n=e.notes,r=e.props,u=e.examples,o=e.setExample,l=e.setProp,i=e.componentProps,c=e.swatches,d=e.children;return a.default.createElement("section",{className:(0,h.default)("layout")},a.default.createElement("h1",{className:(0,h.default)("title")},t),a.default.createElement("section",{className:(0,h.default)("body")},a.default.createElement(f.default,{swatches:c},d),a.default.createElement(p.default,{setExample:o,examples:u}),a.default.createElement(y.default,{state:i,props:r,setProp:l}),a.default.createElement(s.default,{notes:n})))};v.propTypes={children:l.default.element.isRequired,setExample:l.default.func.isRequired,setProp:l.default.func.isRequired,componentProps:l.default.object.isRequired,props:l.default.object,swatches:l.default.arrayOf(l.default.string),name:l.default.string,notes:l.default.object,examples:l.default.object},t.default=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(14),u=function(e){return e&&e.__esModule?e:{default:e}}(r),a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.props,n=e.swatches,r=arguments[1];return(0,u.default)({},{props:t,swatches:n},r)};t.default=a},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=r(i),c=n(1),f=r(c),d=n(2),p=r(d),m=function(e){function t(e){u(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={current:"default"},n.onChange=n.onChange.bind(n),n}return o(t,e),l(t,[{key:"onChange",value:function(e){var t=e.target.value;this.props.setExample(t),this.setState({current:t})}},{key:"render",value:function(){var e=this.props.examples;return e&&s.default.createElement("section",null,s.default.createElement("h2",{className:(0,p.default)("title")},"Examples"),s.default.createElement("div",{className:(0,p.default)("dropdown")},s.default.createElement("select",{className:(0,p.default)("dropdown__select"),onChange:this.onChange,value:this.state.current},Object.keys(e).map(function(e){return s.default.createElement("option",{key:e},e)})),s.default.createElement("div",{className:(0,p.default)("dropdown__arrow")})))||null}}]),t}(i.Component);m.propTypes={setExample:f.default.func.isRequired,examples:f.default.object},t.default=m},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),a=r(u),o=n(1),l=r(o),i=n(2),s=r(i),c=n(3),f=r(c),d=function(e){var t=e.name,n=e.type,r=e.onChange,u=e.value,o=function(e){var u=e.target.value;return r(t,(0,f.default)(u,n))};if("func"===n)return null;var l=void 0;return"string"===n&&(l=a.default.createElement("input",{type:"text",value:u,className:(0,s.default)("input"),onChange:o})),"number"===n&&(l=a.default.createElement("input",{type:"number",value:u,className:(0,s.default)("input"),onChange:o})),l||null};d.propTypes={name:l.default.string.isRequired,type:l.default.string.isRequired,onChange:l.default.func.isRequired,value:l.default.oneOfType([l.default.node,l.default.array]).isRequired},t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),a=r(u),o=n(1),l=r(o),i=function(e){var t=e.notes;return t&&a.default.createElement("section",null,a.default.createElement("h2",null,"Notes"),Object.keys(t).map(function(e){return a.default.createElement("div",{key:e},a.default.createElement("h3",null,e),t[e])}))||null};i.propTypes={notes:l.default.object},t.default=i},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),s=r(i),c=n(1),f=r(c),d=n(2),p=r(d),m=n(12),y=r(m),b=function(e){function t(e){u(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={current:null},n.setSwatch=n.setSwatch.bind(n),n}return o(t,e),l(t,[{key:"setSwatch",value:function(e){this.setState({current:e})}},{key:"render",value:function(){var e=this,t=this.state.current,n=this.props,r=n.swatches,u=n.children,a=void 0;return r&&r.length>0&&(a=s.default.createElement("div",null,s.default.createElement(y.default,{swatch:null,onClick:this.setSwatch}),r.map(function(t){return s.default.createElement(y.default,{key:t,swatch:t,onClick:e.setSwatch})}))),s.default.createElement("div",null,a,s.default.createElement("div",{style:{background:t},className:(0,p.default)("preview")},u))}}]),t}(i.Component);t.default=b,b.propTypes={children:f.default.element.isRequired,swatches:f.default.arrayOf(f.default.string)}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function u(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(0),l=r(o),i=n(1),s=r(i),c=n(7),f=r(c),d=function(e){var t=e.name,n=e.defs,r=void 0===n?{}:n,o=u(e,["name","defs"]),i=r.type,s=r.required;return l.default.createElement("li",null,l.default.createElement("div",null,t),l.default.createElement("div",null,l.default.createElement("b",null,i),s?l.default.createElement("i",null," - is required"):null),l.default.createElement(f.default,a({type:i,name:t},o)))};d.propTypes={name:s.default.string.isRequired,defs:s.default.shape({type:s.default.string.isRequired,required:s.default.bool,defaultValue:s.default.node,description:s.default.string}).isRequired,restProps:s.default.object},t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),a=r(u),o=n(1),l=r(o),i=n(10),s=r(i),c=n(3),f=r(c),d=function(e){var t=e.state,n=e.setProp,r=e.props;return!!r&!!t&&a.default.createElement("section",null,a.default.createElement("h2",null,"Props"),a.default.createElement("ul",null,Object.keys(r).map(function(e){return a.default.createElement(s.default,{key:e,name:e,defs:r[e],value:(0,f.default)(t[e],r[e].type),onChange:n})})))||null};d.propTypes={setProp:l.default.func.isRequired,state:l.default.object,props:l.default.object},t.default=d},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=n(0),a=r(u),o=n(1),l=r(o),i=n(2),s=r(i),c=function(e){var t=e.swatch,n=e.onClick,r=function(){return n(t)};return a.default.createElement("button",{className:(0,s.default)("swatch-button"),style:{background:t},onClick:r})};c.propTypes={onClick:l.default.func.isRequired,swatch:l.default.string},t.default=c},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(5);Object.defineProperty(t,"merge",{enumerable:!0,get:function(){return r(c).default}});var f=n(0),d=r(f),p=n(4),m=r(p),y=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(t){return function(n){function r(t){a(this,r);var n=o(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,t));return n.state={},n.extendedExamples=Object.assign(e.examples||{},{default:i({},n.props)}),n.setExample=n.setExample.bind(n),n.setProp=n.setProp.bind(n),n}return l(r,n),s(r,[{key:"setExample",value:function(e){this.setState(i({},this.extendedExamples[e]))}},{key:"setProp",value:function(e,t){this.setState(u({},e,t))}},{key:"render",value:function(){var n=Object.assign({},this.props,this.state);return d.default.createElement(m.default,i({setExample:this.setExample,setProp:this.setProp,componentProps:n},e),d.default.createElement(t,n))}}]),r}(f.Component)}};t.default=y},function(e,t){e.exports=n}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,